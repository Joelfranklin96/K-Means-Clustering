{"cells":[{"metadata":{"_uuid":"864afc05-57c9-4771-9ab7-df333251006d","_cell_guid":"370658a6-4427-4d1c-b852-2394600b934b","trusted":true},"cell_type":"code","source":"# %% [code]\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ncluster = pd.read_csv('k-means clustering.csv') # Reading data file into 'cluster'.\n\nk = 3 # Number of clusters\nrows = cluster.shape[0] # 'rows' contains the total number of rows in cluster data.\ncols = cluster.shape[1] # 'cols' contains the total number of columns in cluster data.\n\ncentroids = cluster.loc[np.random.randint(1,rows+1,k)] # Randomly initialises 'k' no. of centroids.\ncentroids['new'] = list(range(1,k+1)) \ncentroids.set_index('new',inplace = True) # New indices 1 to k are set for the dataframe 'centroids'.\nd = np.random.rand(rows) # Initialization of d which would contain the centroid number closest to data point.\n\nnumber_of_iterations = 5\nepsilon = list(range(number_of_iterations)) # 'epsilon' is the sum of squares of distances between points and centroid of a cluster for each iteration\n\nfor i in range(0,number_of_iterations): # This 'for' loop is for iterations.\n\n    for j in range(0,rows): # This 'for' loop finds the centroid number closest to the data point.\n        d[j] = ((centroids - cluster.loc[j])**2).sum(axis = 1).idxmin()\n    cluster['centroid number'] = d # A new column 'centroid number' is added to dataframe 'cluster'.\n\n    plt.subplots_adjust(bottom=0.1, right=2, top=0.9) # Adjusts the subplot.\n    plt.subplot(1,number_of_iterations,i+1)\n    sns.scatterplot(x = 'x',y = 'y',data = cluster,hue = 'centroid number',legend = 'full') # Scatter plot is plotted with differentiating factor as 'centroid number'\n    plt.legend(bbox_to_anchor=(1, 1), loc=4, borderaxespad=0.5) #Adjusts the legend box.\n    \n    mean_x = list(range(k)) # Initialisation of 'mean_x' which will store mean of 'x' values of each cluster.\n    mean_y = list(range(k)) # Initialisation of 'mean_y' which will store mean of 'y' values of each cluster.\n    for m in range(0,k): # This 'for' loop calculates mean of 'x' and 'y' values of each cluster.\n        mean_x[m] = cluster[cluster['centroid number'] == (m+1)]['x'].mean()\n        mean_y[m] = cluster[cluster['centroid number'] == (m+1)]['y'].mean()\n    centroids.replace(list(centroids['x']),mean_x,inplace = True) # The 'centroids' are replaced with the new values.\n    centroids.replace(list(centroids['y']),mean_y,inplace = True)\n    \n    z = list(range(k)) # Initialisation of z  and centroid of each cluster.\n    for p in range(0,k): # This 'for' loop calculates square of distances between data points and centroid of each cluster.\n        z[p] = ((cluster[cluster['centroid number'] == p+1][['x','y']] - centroids.iloc[p])**2).values.sum()\n    epsilon[i] = sum(z) # 'epsilon' is sum of squares of distances between points and centroid of a cluster for each iteration\n\n# Plotting graph of 'Iteration number' vs 'Square root of Epsilon'\na = list(range(1,6))\nplt.figure(figsize=(20,10)) # Size of figure is adjusted.\nplt.xticks(fontsize=20) # Size of number labels on x-axis is adjusted.\nplt.yticks(fontsize=20) # Size of number labels on y-axis is adjusted.\nplt.plot(a, [x**0.5 for x in epsilon], 'go--', linewidth=1.5, markersize=4)\nplt.xlabel('Iteration number',fontsize=20) \nplt.ylabel('Square root of epsilon',fontsize=20) \n\n\n    \n\n\n\n    \n\n\n        \n    ","execution_count":0,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":1}